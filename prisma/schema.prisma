// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  accounts Account[]
  orders   Order[]
  reviews  Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  brand       String
  category    String
  inStock     Boolean
  images      Image[]
  reviews     Review[]
  // createDate DateTime @default(now())
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  productId  String   @db.ObjectId
  rating     Int
  comment    String
  createDate DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime      @default(now())
  paymentIntentID String?       @unique
  products        CartProduct[]
  address         Address?      @relation(fields: [addressId], references: [id])

  User      User    @relation(fields: [userId], references: [id])
  addressId String? @db.ObjectId
}

model Image {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  color     String
  colorCode String
  image     String

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model CartProduct {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @db.ObjectId
}

model Address {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  street String
  city   String
  state  String
  zip    String
  Order  Order[]
}
